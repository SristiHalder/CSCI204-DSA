{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Arial-BoldMT;\f2\fswiss\fcharset0 ArialMT;
\f3\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Problem1.java:
\f2\b0  Implements a recursive search function that finds the index of a target element in an array, and analyzes the time complexity for the worst case.\

\f1\b Problem2a.java:
\f2\b0  Checks if an array is symmetric by comparing elements from the start and end towards the center, with a time complexity analysis for the worst case.\

\f1\b Problem2b.java:
\f2\b0  Recursively checks if an array is symmetric by comparing elements from the start and end towards the center, similar to Problem2a but using a different method structure.\

\f1\b Problem3.java:
\f2\b0  Implements a recursive binary search algorithm to find the index of a target element in a sorted array, with a time complexity of O(log n).\

\f1\b Problem4.java:
\f2\b0  Implements the bubble sort algorithm to sort an array in ascending order and analyzes its time complexity, which is quadratic (O(n^2)) in the worst case.
\f3 \
}